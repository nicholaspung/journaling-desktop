name: Build and Release

on:
  push:
    tags:
      - "v*" # Trigger on tags that start with 'v'

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: windows
            extension: .exe
            artifact_name: windows_amd64
          - os: macos-latest
            platform: darwin
            extension: ""
            artifact_name: darwin_amd64
          - os: ubuntu-latest
            platform: linux
            extension: ""
            artifact_name: linux_amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"
          cache: "npm"

      - name: Setup Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev

          # Find the available WebKit package - Ubuntu 24.04 uses a different package naming
          WEBKIT_PKG=$(apt-cache search libwebkit | grep -E 'libwebkit.*-dev' | head -n 1 | awk '{print $1}')

          if [ -n "$WEBKIT_PKG" ]; then
            echo "Found WebKit package: $WEBKIT_PKG"
            sudo apt-get install -y $WEBKIT_PKG
          else
            # Try all known possible package names if search fails
            echo "Trying known WebKit package names..."
            sudo apt-get install -y libwebkitgtk-6.0-dev || \
            sudo apt-get install -y libwebkit2gtk-6.0-dev || \
            sudo apt-get install -y libwebkit2gtk-4.1-dev || \
            sudo apt-get install -y libwebkit2gtk-4.0-dev || \
            echo "Could not find a suitable WebKit package, but continuing anyway..."
          fi

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install frontend dependencies
        run: npm install

      - name: Build application (non-Linux)
        if: matrix.platform != 'linux'
        run: wails build -platform ${{ matrix.platform }}

      - name: Build application (Linux)
        if: matrix.platform == 'linux'
        run: wails build -platform ${{ matrix.platform }} -tags webkit2_41

      - name: Debug build output (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          echo "Listing build directory contents:"
          dir build\bin

      - name: Debug build output (Non-Windows)
        if: matrix.platform != 'windows'
        run: |
          echo "Listing build directory contents:"
          ls -la build/bin

      - name: Rename binary (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          cd build/bin
          $exeFile = Get-ChildItem -Path . -Filter *.exe | Select-Object -First 1
          if ($exeFile) {
            Write-Host "Found exe file: $($exeFile.Name)"
            Rename-Item -Path $exeFile.Name -NewName "DailyReflection_${{ matrix.artifact_name }}${{ matrix.extension }}"
            Get-ChildItem -Path .
          } else {
            Write-Host "No exe file found!"
            Get-ChildItem -Path .
            exit 1
          }

      - name: Rename binary (macOS)
        if: matrix.platform == 'darwin'
        run: |
          cd build/bin
          ls -la
          appName=$(ls | grep .app)
          if [ -n "$appName" ]; then
            echo "Found app: $appName"
            mv "$appName" "DailyReflection_${{ matrix.artifact_name }}.app"
            # Create a zip file for macOS app
            zip -r "DailyReflection_${{ matrix.artifact_name }}.zip" "DailyReflection_${{ matrix.artifact_name }}.app"
            ls -la
          else
            echo "No .app bundle found!"
            ls -la
            exit 1
          fi

      - name: Rename binary (Linux)
        if: matrix.platform == 'linux'
        run: |
          cd build/bin
          ls -la
          # Find the binary - could be named after the folder or something else
          binaries=$(find . -type f -executable -not -path "*/\.*")
          if [ -n "$binaries" ]; then
            for binary in $binaries; do
              echo "Found binary: $binary"
              cp "$binary" "DailyReflection_${{ matrix.artifact_name }}"
              chmod +x "DailyReflection_${{ matrix.artifact_name }}"
              break
            done
            ls -la
          else
            echo "No executable binaries found!"
            ls -la
            exit 1
          fi

      - name: Debug build directory before upload (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          echo "Contents of build/bin before upload:"
          dir build\bin

      - name: Debug build directory before upload (Non-Windows)
        if: matrix.platform != 'windows'
        run: |
          echo "Contents of build/bin before upload:"
          ls -la build/bin

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: DailyReflection_${{ matrix.artifact_name }}
          path: build/bin/
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Display structure of downloaded artifacts
        run: |
          echo "Listing all artifacts:"
          find artifacts -type f | sort
          echo ""
          echo "Detailed artifact directory structure:"
          find artifacts -type f -exec ls -la {} \;

      - name: Prepare release files
        run: |
          mkdir -p release_files

          # Windows executables
          find artifacts -name "*.exe" -exec cp {} release_files/ \;

          # macOS zip files
          find artifacts -name "*.zip" -exec cp {} release_files/ \;

          # Linux executables - make sure to get those without extensions
          find artifacts/DailyReflection_linux_amd64 -type f -executable -not -path "*/\.*" | xargs -I{} cp {} release_files/

          # If there's a Linux executable, add .tar.gz for better distribution
          if [ -f "release_files/DailyReflection_linux_amd64" ]; then
            cd release_files
            tar -czf DailyReflection_linux_amd64.tar.gz DailyReflection_linux_amd64
            cd ..
          fi

          echo "Contents of release_files directory:"
          ls -la release_files

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: release_files/*
          generate_release_notes: false
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
